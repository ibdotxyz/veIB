{
  "address": "0xF9d60249C9590eF60B6A7d3f95fD0F98Cb512588",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceOf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "output",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc851110638d123e78cfca4e6fc0b00eb8d8e264204206a6d13a52f2b112cb9e1",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0xF9d60249C9590eF60B6A7d3f95fD0F98Cb512588",
    "transactionIndex": 0,
    "gasUsed": "612949",
    "logsBloom": "0x
    "blockHash": "0xb6138d192d14d32fc838f2a9c5ac44332ebb93753e45fd681ad41cfb8d1f830e",
    "transactionHash": "0xc851110638d123e78cfca4e6fc0b00eb8d8e264204206a6d13a52f2b112cb9e1",
    "logs": [],
    "blockNumber": 27480793,
    "cumulativeGasUsed": "612949",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5b33407f7a5a61f0fe625bc8c58e0f67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenDescriptor.sol\":\"TokenDescriptor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TokenDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.11;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\\ncontract TokenDescriptor {\\n\\n    function tokenURI(uint256 tokenId, uint256 balanceOf, uint256 lockedEnd, uint256 value) external view returns (string memory output) {\\n        output = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n        output = string(abi.encodePacked(output, \\\"token \\\", toString(tokenId), '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">'));\\n        output = string(abi.encodePacked(output, \\\"balanceOf \\\", toString(balanceOf), '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">'));\\n        output = string(abi.encodePacked(output, \\\"locked_end \\\", toString(lockedEnd), '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">'));\\n        output = string(abi.encodePacked(output, \\\"value \\\", toString(value), '</text></svg>'));\\n\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"lock #', toString(tokenId), '\\\", \\\"description\\\": \\\"Solidly locks, can be used to boost gauge yields, vote on token emission, and receive bribes\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n    }\\n\\n    function toString(uint value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint temp = value;\\n        uint digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xb0ab58da8d35f037c405206e5f1748fe125b38e9657bece63bf980e6e9b1dcba\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a1f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063555df1d014610030575b600080fd5b61004361003e3660046103fc565b610059565b604051610050919061045e565b60405180910390f35b606060405180610120016040528060fd81526020016108ad60fd913990508061008186610190565b604051602001610092929190610491565b6040516020818303038152906040529050806100ad85610190565b6040516020016100be92919061050d565b6040516020818303038152906040529050806100d984610190565b6040516020016100ea92919061058d565b60405160208183030381529060405290508061010583610190565b60405160200161011692919061060e565b6040516020818303038152906040529050600061016361013587610190565b61013e84610296565b60405160200161014f929190610669565b604051602081830303815290604052610296565b905080604051602001610176919061077e565b604051602081830303815290604052915050949350505050565b6060816101b45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156101de57806101c8816107d9565b91506101d79050600a8361080a565b91506101b8565b60008167ffffffffffffffff8111156101f9576101f961081e565b6040519080825280601f01601f191660200182016040528015610223576020820181803683370190505b5090505b841561028e57610238600183610834565b9150610245600a8661084b565b61025090603061085f565b60f81b81838151811061026557610265610877565b60200101906001600160f81b031916908160001a905350610287600a8661080a565b9450610227565b949350505050565b8051606090806102b6575050604080516020810190915260008152919050565b600060036102c583600261085f565b6102cf919061080a565b6102da90600461088d565b905060006102e982602061085f565b67ffffffffffffffff8111156103015761030161081e565b6040519080825280601f01601f19166020018201604052801561032b576020820181803683370190505b50905060006040518060600160405280604081526020016109aa604091399050600181016020830160005b868110156103b7576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101610356565b5060038606600181146103d157600281146103e2576103ee565b613d3d60f01b6001198301526103ee565b603d60f81b6000198301525b505050918152949350505050565b6000806000806080858703121561041257600080fd5b5050823594602084013594506040840135936060013592509050565b60005b83811015610449578181015183820152602001610431565b83811115610458576000848401525b50505050565b602081526000825180602084015261047d81604085016020870161042e565b601f01601f19169190910160400192915050565b600083516104a381846020880161042e565b6503a37b5b2b7160d51b90830190815283516104c681600684016020880161042e565b7f3c2f746578743e3c7465787420783d2231302220793d2234302220636c61737360069290910191820152671e913130b9b2911f60c11b6026820152602e01949350505050565b6000835161051f81846020880161042e565b6903130b630b731b2a7b3160b51b908301908152835161054681600a84016020880161042e565b7f3c2f746578743e3c7465787420783d2231302220793d2236302220636c617373600a9290910191820152671e913130b9b2911f60c11b602a820152603201949350505050565b6000835161059f81846020880161042e565b6a03637b1b5b2b22fb2b732160ad1b90830190815283516105c781600b84016020880161042e565b7f3c2f746578743e3c7465787420783d2231302220793d2238302220636c617373600b9290910191820152671e913130b9b2911f60c11b602b820152603301949350505050565b6000835161062081846020880161042e565b6503b30b63ab2960d51b908301908152835161064381600684016020880161042e565b6c1e17ba32bc3a1f1e17b9bb339f60991b60069290910191820152601301949350505050565b6f7b226e616d65223a20226c6f636b202360801b8152825160009061069581601085016020880161042e565b7f222c20226465736372697074696f6e223a2022536f6c69646c79206c6f636b736010918401918201527f2c2063616e206265207573656420746f20626f6f73742067617567652079696560308201527f6c64732c20766f7465206f6e20746f6b656e20656d697373696f6e2c20616e6460508201527f207265636569766520627269626573222c2022696d616765223a2022646174616070820152750e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60521b609082015283516107638160a684016020880161042e565b61227d60f01b60a6929091019182015260a801949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516107b681601d85016020870161042e565b91909101601d0192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156107ed576107ed6107c3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610819576108196107f4565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015610846576108466107c3565b500390565b60008261085a5761085a6107f4565b500690565b60008219821115610872576108726107c3565b500190565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156108a7576108a76107c3565b50029056fe3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302033353020333530223e3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e742d66616d696c793a2073657269663b20666f6e742d73697a653a20313470783b207d3c2f7374796c653e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d22626c61636b22202f3e3c7465787420783d2231302220793d2232302220636c6173733d2262617365223e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fefb0c56c15eaa0ec54f4cae2a601a6fddefd339382ce332d22ae1da4030579d64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063555df1d014610030575b600080fd5b61004361003e3660046103fc565b610059565b604051610050919061045e565b60405180910390f35b606060405180610120016040528060fd81526020016108ad60fd913990508061008186610190565b604051602001610092929190610491565b6040516020818303038152906040529050806100ad85610190565b6040516020016100be92919061050d565b6040516020818303038152906040529050806100d984610190565b6040516020016100ea92919061058d565b60405160208183030381529060405290508061010583610190565b60405160200161011692919061060e565b6040516020818303038152906040529050600061016361013587610190565b61013e84610296565b60405160200161014f929190610669565b604051602081830303815290604052610296565b905080604051602001610176919061077e565b604051602081830303815290604052915050949350505050565b6060816101b45750506040805180820190915260018152600360fc1b602082015290565b8160005b81156101de57806101c8816107d9565b91506101d79050600a8361080a565b91506101b8565b60008167ffffffffffffffff8111156101f9576101f961081e565b6040519080825280601f01601f191660200182016040528015610223576020820181803683370190505b5090505b841561028e57610238600183610834565b9150610245600a8661084b565b61025090603061085f565b60f81b81838151811061026557610265610877565b60200101906001600160f81b031916908160001a905350610287600a8661080a565b9450610227565b949350505050565b8051606090806102b6575050604080516020810190915260008152919050565b600060036102c583600261085f565b6102cf919061080a565b6102da90600461088d565b905060006102e982602061085f565b67ffffffffffffffff8111156103015761030161081e565b6040519080825280601f01601f19166020018201604052801561032b576020820181803683370190505b50905060006040518060600160405280604081526020016109aa604091399050600181016020830160005b868110156103b7576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101610356565b5060038606600181146103d157600281146103e2576103ee565b613d3d60f01b6001198301526103ee565b603d60f81b6000198301525b505050918152949350505050565b6000806000806080858703121561041257600080fd5b5050823594602084013594506040840135936060013592509050565b60005b83811015610449578181015183820152602001610431565b83811115610458576000848401525b50505050565b602081526000825180602084015261047d81604085016020870161042e565b601f01601f19169190910160400192915050565b600083516104a381846020880161042e565b6503a37b5b2b7160d51b90830190815283516104c681600684016020880161042e565b7f3c2f746578743e3c7465787420783d2231302220793d2234302220636c61737360069290910191820152671e913130b9b2911f60c11b6026820152602e01949350505050565b6000835161051f81846020880161042e565b6903130b630b731b2a7b3160b51b908301908152835161054681600a84016020880161042e565b7f3c2f746578743e3c7465787420783d2231302220793d2236302220636c617373600a9290910191820152671e913130b9b2911f60c11b602a820152603201949350505050565b6000835161059f81846020880161042e565b6a03637b1b5b2b22fb2b732160ad1b90830190815283516105c781600b84016020880161042e565b7f3c2f746578743e3c7465787420783d2231302220793d2238302220636c617373600b9290910191820152671e913130b9b2911f60c11b602b820152603301949350505050565b6000835161062081846020880161042e565b6503b30b63ab2960d51b908301908152835161064381600684016020880161042e565b6c1e17ba32bc3a1f1e17b9bb339f60991b60069290910191820152601301949350505050565b6f7b226e616d65223a20226c6f636b202360801b8152825160009061069581601085016020880161042e565b7f222c20226465736372697074696f6e223a2022536f6c69646c79206c6f636b736010918401918201527f2c2063616e206265207573656420746f20626f6f73742067617567652079696560308201527f6c64732c20766f7465206f6e20746f6b656e20656d697373696f6e2c20616e6460508201527f207265636569766520627269626573222c2022696d616765223a2022646174616070820152750e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60521b609082015283516107638160a684016020880161042e565b61227d60f01b60a6929091019182015260a801949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516107b681601d85016020870161042e565b91909101601d0192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156107ed576107ed6107c3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610819576108196107f4565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015610846576108466107c3565b500390565b60008261085a5761085a6107f4565b500690565b60008219821115610872576108726107c3565b500190565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156108a7576108a76107c3565b50029056fe3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302033353020333530223e3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e742d66616d696c793a2073657269663b20666f6e742d73697a653a20313470783b207d3c2f7374796c653e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d22626c61636b22202f3e3c7465787420783d2231302220793d2232302220636c6173733d2262617365223e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fefb0c56c15eaa0ec54f4cae2a601a6fddefd339382ce332d22ae1da4030579d64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}