{
  "address": "0x15aB2Cc164d7817Ac2a5b2A6362AbeE088B7F2df",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dist",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "emergencyReturn",
          "type": "address"
        }
      ],
      "name": "FeeDistCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ve",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "startTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "admins",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "emergencyReturns",
          "type": "address[]"
        }
      ],
      "name": "createFeeDist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6581e53ac0ca840eec3370ad83ecdbe48ab46bd62eeec31e8e54dcff53d02b2",
  "receipt": {
    "to": null,
    "from": "0x1BA608D6a354fbEb41FD7cC799e7f09b2612AB26",
    "contractAddress": "0x15aB2Cc164d7817Ac2a5b2A6362AbeE088B7F2df",
    "transactionIndex": 0,
    "gasUsed": "2233546",
    "logsBloom": "0x
    "blockHash": "0xd00a82e6dfa0d773858a01cf29fa68e62275557f8cfbf07a275fa01a9e713911",
    "transactionHash": "0xd6581e53ac0ca840eec3370ad83ecdbe48ab46bd62eeec31e8e54dcff53d02b2",
    "logs": [],
    "blockNumber": 28800195,
    "cumulativeGasUsed": "2233546",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "32cca34e5afee13e7ff743205c4f10d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dist\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"emergencyReturn\",\"type\":\"address\"}],\"name\":\"FeeDistCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ve\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"startTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"emergencyReturns\",\"type\":\"address[]\"}],\"name\":\"createFeeDist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fee_dist.sol\":\"FeeDistFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/fee_dist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/*\\n\\n@title Curve Fee Distribution modified for ve(3,3) emissions\\n@author Curve Finance, andrecronje\\n@license MIT\\n\\n*/\\nlibrary Math {\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\\ninterface VotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n    function epoch() external view returns (uint);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function token() external view returns (address);\\n    function ownerOf(uint _tokenId) external view returns (address);\\n}\\n\\ncontract fee_dist {\\n    using SafeERC20 for IERC20;\\n\\n    event CheckpointToken(\\n        uint time,\\n        uint tokens\\n    );\\n\\n    event Claimed(\\n        uint tokenId,\\n        uint amount,\\n        uint claim_epoch,\\n        uint max_epoch\\n    );\\n\\n    event NewPendingAdmin(address old_pending_admin, address new_pending_admin);\\n    event NewAdmin(address old_admin, address new_admin);\\n\\n    uint constant WEEK = 7 * 86400;\\n\\n    uint public start_time;\\n    uint public time_cursor;\\n    mapping(uint => uint) public time_cursor_of;\\n    mapping(uint => uint) public user_epoch_of;\\n\\n    uint public last_token_time;\\n    uint[1000000000000000] public tokens_per_week;\\n\\n    address public voting_escrow;\\n    address public token;\\n    uint public token_last_balance;\\n\\n    uint[1000000000000000] public ve_supply;\\n\\n    address public admin;\\n    address public pending_admin;\\n    address public emergency_return;\\n\\n    bool public is_killed;\\n\\n    /// @dev reentrancy guard\\n    uint8 internal constant _not_entered = 1;\\n    uint8 internal constant _entered = 2;\\n    uint8 internal _entered_state = 1;\\n    modifier nonreentrant() {\\n        require(_entered_state == _not_entered);\\n        _entered_state = _entered;\\n        _;\\n        _entered_state = _not_entered;\\n    }\\n\\n    constructor(address _voting_escrow, uint256 _start_time, address _token, address _admin, address _emergency_return) {\\n        uint _t = _start_time / WEEK * WEEK;\\n        start_time = _t;\\n        last_token_time = _t;\\n        time_cursor = _t;\\n        token = _token;\\n        voting_escrow = _voting_escrow;\\n        admin = _admin;\\n        emergency_return = _emergency_return;\\n    }\\n\\n    function timestamp() external view returns (uint) {\\n        return block.timestamp / WEEK * WEEK;\\n    }\\n\\n    function _checkpoint_token() internal {\\n        uint token_balance = IERC20(token).balanceOf(address(this));\\n        uint to_distribute = token_balance - token_last_balance;\\n        token_last_balance = token_balance;\\n\\n        uint t = last_token_time;\\n        uint since_last = block.timestamp - t;\\n        last_token_time = block.timestamp;\\n        uint this_week = t / WEEK * WEEK;\\n        uint next_week = 0;\\n\\n        for (uint i = 0; i < 20; i++) {\\n            next_week = this_week + WEEK;\\n            if (block.timestamp < next_week) {\\n                if (since_last == 0 && block.timestamp == t) {\\n                    tokens_per_week[this_week] += to_distribute;\\n                } else {\\n                    tokens_per_week[this_week] += to_distribute * (block.timestamp - t) / since_last;\\n                }\\n                break;\\n            } else {\\n                if (since_last == 0 && next_week == t) {\\n                    tokens_per_week[this_week] += to_distribute;\\n                } else {\\n                    tokens_per_week[this_week] += to_distribute * (next_week - t) / since_last;\\n                }\\n            }\\n            t = next_week;\\n            this_week = next_week;\\n        }\\n        emit CheckpointToken(block.timestamp, to_distribute);\\n    }\\n\\n    function checkpoint_token() external {\\n        assert(msg.sender == admin);\\n        _checkpoint_token();\\n    }\\n\\n    function _find_timestamp_epoch(address ve, uint _timestamp) internal view returns (uint) {\\n        uint _min = 0;\\n        uint _max = VotingEscrow(ve).epoch();\\n        for (uint i = 0; i < 128; i++) {\\n            if (_min >= _max) break;\\n            uint _mid = (_min + _max + 2) / 2;\\n            VotingEscrow.Point memory pt = VotingEscrow(ve).point_history(_mid);\\n            if (pt.ts <= _timestamp) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    function _find_timestamp_user_epoch(address ve, uint tokenId, uint _timestamp, uint max_user_epoch) internal view returns (uint) {\\n        uint _min = 0;\\n        uint _max = max_user_epoch;\\n        for (uint i = 0; i < 128; i++) {\\n            if (_min >= _max) break;\\n            uint _mid = (_min + _max + 2) / 2;\\n            VotingEscrow.Point memory pt = VotingEscrow(ve).user_point_history(tokenId, _mid);\\n            if (pt.ts <= _timestamp) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid -1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    function ve_for_at(uint _tokenId, uint _timestamp) external view returns (uint) {\\n        address ve = voting_escrow;\\n        uint max_user_epoch = VotingEscrow(ve).user_point_epoch(_tokenId);\\n        uint epoch = _find_timestamp_user_epoch(ve, _tokenId, _timestamp, max_user_epoch);\\n        VotingEscrow.Point memory pt = VotingEscrow(ve).user_point_history(_tokenId, epoch);\\n        return Math.max(uint(int256(pt.bias - pt.slope * (int128(int256(_timestamp - pt.ts))))), 0);\\n    }\\n\\n    function _checkpoint_total_supply() internal {\\n        address ve = voting_escrow;\\n        uint t = time_cursor;\\n        uint rounded_timestamp = block.timestamp / WEEK * WEEK;\\n        VotingEscrow(ve).checkpoint();\\n\\n        for (uint i = 0; i < 20; i++) {\\n            if (t > rounded_timestamp) {\\n                break;\\n            } else {\\n                uint epoch = _find_timestamp_epoch(ve, t);\\n                VotingEscrow.Point memory pt = VotingEscrow(ve).point_history(epoch);\\n                int128 dt = 0;\\n                if (t > pt.ts) {\\n                    dt = int128(int256(t - pt.ts));\\n                }\\n                ve_supply[t] = Math.max(uint(int256(pt.bias - pt.slope * dt)), 0);\\n            }\\n            t += WEEK;\\n        }\\n        time_cursor = t;\\n    }\\n\\n    function checkpoint_total_supply() external {\\n        _checkpoint_total_supply();\\n    }\\n\\n    function _claim(uint _tokenId, address ve, uint _last_token_time) internal returns (uint) {\\n        uint user_epoch = 0;\\n        uint to_distribute = 0;\\n\\n        uint max_user_epoch = VotingEscrow(ve).user_point_epoch(_tokenId);\\n        uint _start_time = start_time;\\n\\n        if (max_user_epoch == 0) return 0;\\n\\n        uint week_cursor = time_cursor_of[_tokenId];\\n        if (week_cursor == 0) {\\n            user_epoch = _find_timestamp_user_epoch(ve, _tokenId, _start_time, max_user_epoch);\\n        } else {\\n            user_epoch = user_epoch_of[_tokenId];\\n        }\\n\\n        if (user_epoch == 0) user_epoch = 1;\\n\\n        VotingEscrow.Point memory user_point = VotingEscrow(ve).user_point_history(_tokenId, user_epoch);\\n\\n        if (week_cursor == 0) week_cursor = (user_point.ts + WEEK - 1) / WEEK * WEEK;\\n        if (week_cursor >= last_token_time) return 0;\\n        if (week_cursor < _start_time) week_cursor = _start_time;\\n\\n        VotingEscrow.Point memory old_user_point;\\n\\n        for (uint i = 0; i < 50; i++) {\\n            if (week_cursor >= _last_token_time) break;\\n\\n            if (week_cursor >= user_point.ts && user_epoch <= max_user_epoch) {\\n                user_epoch += 1;\\n                old_user_point = user_point;\\n                if (user_epoch > max_user_epoch) {\\n                    user_point = VotingEscrow.Point(0,0,0,0);\\n                } else {\\n                    user_point = VotingEscrow(ve).user_point_history(_tokenId, user_epoch);\\n                }\\n            } else {\\n                int128 dt = int128(int256(week_cursor - old_user_point.ts));\\n                uint balance_of = Math.max(uint(int256(old_user_point.bias - dt * old_user_point.slope)), 0);\\n                if (balance_of == 0 && user_epoch > max_user_epoch) break;\\n                if (balance_of > 0) {\\n                    to_distribute += balance_of * tokens_per_week[week_cursor] / ve_supply[week_cursor];\\n                }\\n                week_cursor += WEEK;\\n            }\\n        }\\n\\n        user_epoch = Math.min(max_user_epoch, user_epoch - 1);\\n        user_epoch_of[_tokenId] = user_epoch;\\n        time_cursor_of[_tokenId] = week_cursor;\\n\\n        emit Claimed(_tokenId, to_distribute, user_epoch, max_user_epoch);\\n\\n        return to_distribute;\\n    }\\n\\n    function _claimable(uint _tokenId, address ve, uint _last_token_time) internal view returns (uint) {\\n        uint user_epoch = 0;\\n        uint to_distribute = 0;\\n\\n        uint max_user_epoch = VotingEscrow(ve).user_point_epoch(_tokenId);\\n        uint _start_time = start_time;\\n\\n        if (max_user_epoch == 0) return 0;\\n\\n        uint week_cursor = time_cursor_of[_tokenId];\\n        if (week_cursor == 0) {\\n            user_epoch = _find_timestamp_user_epoch(ve, _tokenId, _start_time, max_user_epoch);\\n        } else {\\n            user_epoch = user_epoch_of[_tokenId];\\n        }\\n\\n        if (user_epoch == 0) user_epoch = 1;\\n\\n        VotingEscrow.Point memory user_point = VotingEscrow(ve).user_point_history(_tokenId, user_epoch);\\n\\n        if (week_cursor == 0) week_cursor = (user_point.ts + WEEK - 1) / WEEK * WEEK;\\n        if (week_cursor >= last_token_time) return 0;\\n        if (week_cursor < _start_time) week_cursor = _start_time;\\n\\n        VotingEscrow.Point memory old_user_point;\\n\\n        for (uint i = 0; i < 50; i++) {\\n            if (week_cursor >= _last_token_time) break;\\n\\n            if (week_cursor >= user_point.ts && user_epoch <= max_user_epoch) {\\n                user_epoch += 1;\\n                old_user_point = user_point;\\n                if (user_epoch > max_user_epoch) {\\n                    user_point = VotingEscrow.Point(0,0,0,0);\\n                } else {\\n                    user_point = VotingEscrow(ve).user_point_history(_tokenId, user_epoch);\\n                }\\n            } else {\\n                int128 dt = int128(int256(week_cursor - old_user_point.ts));\\n                uint balance_of = Math.max(uint(int256(old_user_point.bias - dt * old_user_point.slope)), 0);\\n                if (balance_of == 0 && user_epoch > max_user_epoch) break;\\n                if (balance_of > 0) {\\n                    to_distribute += balance_of * tokens_per_week[week_cursor] / ve_supply[week_cursor];\\n                }\\n                week_cursor += WEEK;\\n            }\\n        }\\n\\n        return to_distribute;\\n    }\\n\\n    function claimable(uint _tokenId) external view returns (uint) {\\n        uint _last_token_time = last_token_time / WEEK * WEEK;\\n        return _claimable(_tokenId, voting_escrow, _last_token_time);\\n    }\\n\\n    function claim(uint _tokenId) external nonreentrant returns (uint) {\\n        require(!is_killed, \\\"killed\\\");\\n        if (block.timestamp >= time_cursor) _checkpoint_total_supply();\\n        uint _last_token_time = last_token_time;\\n        _last_token_time = _last_token_time / WEEK * WEEK;\\n        uint amount = _claim(_tokenId, voting_escrow, _last_token_time);\\n        if (amount != 0) {\\n            address ve_owner = VotingEscrow(voting_escrow).ownerOf(_tokenId);\\n            IERC20(token).safeTransfer(ve_owner, amount);\\n            token_last_balance -= amount;\\n        }\\n        return amount;\\n    }\\n\\n    function claim_many(uint[] memory _tokenIds) external nonreentrant returns (bool) {\\n        require(!is_killed, \\\"killed\\\");\\n        if (block.timestamp >= time_cursor) _checkpoint_total_supply();\\n        uint _last_token_time = last_token_time;\\n        _last_token_time = _last_token_time / WEEK * WEEK;\\n        address _voting_escrow = voting_escrow;\\n        uint total = 0;\\n\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            uint _tokenId = _tokenIds[i];\\n            if (_tokenId == 0) break;\\n            uint amount = _claim(_tokenId, _voting_escrow, _last_token_time);\\n            if (amount != 0) {\\n                address ve_owner = VotingEscrow(voting_escrow).ownerOf(_tokenId);\\n                IERC20(token).safeTransfer(ve_owner, amount);\\n                total += amount;\\n            }\\n        }\\n        if (total != 0) {\\n            token_last_balance -= total;\\n        }\\n\\n        return true;\\n    }\\n\\n    function set_pending_admin(address _addr) external {\\n        require(msg.sender == admin);\\n        address old_pending_admin = pending_admin;\\n        pending_admin = _addr;\\n        emit NewPendingAdmin(old_pending_admin, pending_admin);\\n    }\\n\\n    function accept_admin() external {\\n        require(msg.sender == pending_admin);\\n        address old_admin = admin;\\n        admin = pending_admin;\\n        pending_admin = address(0);\\n        emit NewAdmin(old_admin, admin);\\n    }\\n\\n    function kill_me() external {\\n        require(msg.sender == admin);\\n        is_killed = true;\\n        uint amount = IERC20(token).balanceOf(address(this));\\n        IERC20(token).safeTransfer(emergency_return, amount);\\n    }\\n\\n    function recover_balance(address _coin) external {\\n        require(msg.sender == admin);\\n        require(_coin != token);\\n        uint256 amount = IERC20(_coin).balanceOf(address(this));\\n        IERC20(_coin).safeTransfer(admin, amount);\\n    }\\n}\\n\\ncontract FeeDistFactory {\\n\\n    event FeeDistCreated(\\n        address indexed dist,\\n        address indexed ve,\\n        address indexed token,\\n        uint256 startTime,\\n        address admin,\\n        address emergencyReturn\\n    );\\n\\n    function createFeeDist(address ve,\\n        uint256[] calldata startTimes,\\n        address[] calldata tokens,\\n        address[] calldata admins,\\n        address[] calldata emergencyReturns\\n    ) external {\\n      for (uint256 i = 0; i < startTimes.length; i++) {\\n          address dist = address(new fee_dist(ve, startTimes[i], tokens[i], admins[i], emergencyReturns[i]));\\n          emit FeeDistCreated(dist, ve, tokens[i], startTimes[i], admins[i], emergencyReturns[i]);\\n      }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe976b51ff1d539b604f5cc26065fd4aca4e0fa66c3e3dfeb3e7930b5c0b7929a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612776806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637ca4850014610030575b600080fd5b61004361003e3660046102c3565b610045565b005b60005b878110156102425760008a8a8a848181106100655761006561039a565b9050602002013589898581811061007e5761007e61039a565b905060200201602081019061009391906103b0565b8888868181106100a5576100a561039a565b90506020020160208101906100ba91906103b0565b8787878181106100cc576100cc61039a565b90506020020160208101906100e191906103b0565b6040516100ed9061024e565b6001600160a01b0395861681526020810194909452918416604084015283166060830152909116608082015260a001604051809103906000f080158015610138573d6000803e3d6000fd5b50905087878381811061014d5761014d61039a565b905060200201602081019061016291906103b0565b6001600160a01b03168b6001600160a01b0316826001600160a01b03167fd8bb1da9711c8d8a288fab09d4091ec2c7396075875a933489ba01f1b2b7a9f88d8d878181106101b2576101b261039a565b905060200201358a8a888181106101cb576101cb61039a565b90506020020160208101906101e091906103b0565b8989898181106101f2576101f261039a565b905060200201602081019061020791906103b0565b604080519384526001600160a01b03928316602085015291169082015260600160405180910390a4508061023a816103d2565b915050610048565b50505050505050505050565b612345806103fc83390190565b80356001600160a01b038116811461027257600080fd5b919050565b60008083601f84011261028957600080fd5b50813567ffffffffffffffff8111156102a157600080fd5b6020830191508360208260051b85010111156102bc57600080fd5b9250929050565b600080600080600080600080600060a08a8c0312156102e157600080fd5b6102ea8a61025b565b985060208a013567ffffffffffffffff8082111561030757600080fd5b6103138d838e01610277565b909a50985060408c013591508082111561032c57600080fd5b6103388d838e01610277565b909850965060608c013591508082111561035157600080fd5b61035d8d838e01610277565b909650945060808c013591508082111561037657600080fd5b506103838c828d01610277565b915080935050809150509295985092959850929598565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156103c257600080fd5b6103cb8261025b565b9392505050565b60006000198214156103f457634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405266071afd498d000a805460ff60a81b1916600160a81b1790553480156200002a57600080fd5b5060405162002345380380620023458339810160408190526200004d9162000101565b600062093a806200005f818762000168565b6200006b91906200018b565b600081905560048190556001555066038d7ea4c6800680546001600160a01b03199081166001600160a01b039586161790915566038d7ea4c68005805482169685169690961790955566071afd498d0008805486169284169290921790915566071afd498d000a805490941691161790915550620001b9565b80516001600160a01b0381168114620000fc57600080fd5b919050565b600080600080600060a086880312156200011a57600080fd5b6200012586620000e4565b9450602086015193506200013c60408701620000e4565b92506200014c60608701620000e4565b91506200015c60808701620000e4565b90509295509295909350565b6000826200018657634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620001b457634e487b7160e01b600052601160045260246000fd5b500290565b61217c80620001c96000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80639c868ac0116100de578063dfe0503111610097578063e671928711610071578063e671928714610318578063edf5999714610331578063f851a44014610344578063fc0c546a1461035d57600080fd5b8063dfe05031146102ef578063e1593b1314610308578063e36988531461031057600080fd5b80639c868ac01461028c578063b21ed502146102a6578063b80777ea146102ae578063d1d58b25146102b6578063d4dafba8146102c9578063db2f5f79146102dc57600080fd5b8063379607f511610130578063379607f51461022c578063486d25fe1461023f578063688098891461025f5780637f58e8f814610272578063811a40fe1461027b578063834ee4171461028357600080fd5b8063127dcbd31461017857806316aea5c0146101945780631f1db043146101b457806322b04bfc146101d7578063290717df146101e65780632c3f531e146101fb575b600080fd5b61018160015481565b6040519081526020015b60405180910390f35b6101816101a2366004611cd1565b60036020526000908152604090205481565b6101c76101c2366004611d31565b610376565b604051901515815260200161018b565b61018166038d7ea4c680075481565b6101f96101f4366004611dec565b61058a565b005b66071afd498d000a54610214906001600160a01b031681565b6040516001600160a01b03909116815260200161018b565b61018161023a366004611cd1565b61060e565b61018161024d366004611cd1565b60026020526000908152604090205481565b61018161026d366004611e09565b6107b8565b61018160045481565b6101f96108fb565b61018160005481565b66071afd498d000a546101c790600160a01b900460ff1681565b6101f9610925565b61018161092d565b6101816102c4366004611cd1565b61094c565b6101816102d7366004611cd1565b610993565b6101f96102ea366004611dec565b6109b6565b66038d7ea4c6800554610214906001600160a01b031681565b6101f9610a86565b6101f9610b1b565b66071afd498d000954610214906001600160a01b031681565b61018161033f366004611cd1565b610bf3565b66071afd498d000854610214906001600160a01b031681565b66038d7ea4c6800654610214906001600160a01b031681565b66071afd498d000a54600090600160a81b900460ff1660011461039857600080fd5b66071afd498d000a805460ff60a81b1916600160a91b179081905560ff600160a01b90910416156103f95760405162461bcd60e51b81526020600482015260066024820152651ada5b1b195960d21b60448201526064015b60405180910390fd5b600154421061040a5761040a610c09565b60045462093a8061041b8183611e41565b6104259190611e63565b66038d7ea4c68005549091506001600160a01b03166000805b855181101561054057600086828151811061045b5761045b611e82565b6020026020010151905080600014156104745750610540565b6000610481828688610db2565b9050801561052b5766038d7ea4c68005546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e90602401602060405180830381865afa1580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd9190611e98565b66038d7ea4c680065490915061051d906001600160a01b031682846111ce565b6105278286611eb5565b9450505b5050808061053890611ecd565b91505061043e565b508015610565578066038d7ea4c68007600082825461055f9190611ee8565b90915550505b6001935050505066071afd498d000a805460ff60a81b1916600160a81b179055919050565b66071afd498d0008546001600160a01b031633146105a757600080fd5b66071afd498d000980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a15050565b66071afd498d000a54600090600160a81b900460ff1660011461063057600080fd5b66071afd498d000a805460ff60a81b1916600160a91b179081905560ff600160a01b909104161561068c5760405162461bcd60e51b81526020600482015260066024820152651ada5b1b195960d21b60448201526064016103f0565b600154421061069d5761069d610c09565b60045462093a806106ae8183611e41565b6106b89190611e63565b66038d7ea4c68005549091506000906106dc9085906001600160a01b031684610db2565b905080156107975766038d7ea4c68005546040516331a9108f60e11b8152600481018690526000916001600160a01b031690636352211e90602401602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190611e98565b66038d7ea4c6800654909150610778906001600160a01b031682846111ce565b8166038d7ea4c6800760008282546107909190611ee8565b9091555050505b91505066071afd498d000a805460ff60a81b1916600160a81b179055919050565b66038d7ea4c680055460405163391044d760e21b8152600481018490526000916001600160a01b0316908290829063e441135c90602401602060405180830381865afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190611eff565b9050600061084083878785611225565b6040516309bb79ed60e11b815260048101889052602481018290529091506000906001600160a01b03851690631376f3da90604401608060405180830381865afa158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190611f2f565b90506108f08160400151876108cb9190611ee8565b82602001516108da9190611fa1565b82516108e6919061203f565b600f0b600061131d565b979650505050505050565b66071afd498d0008546001600160a01b0316331461091b5761091b61208f565b610923611334565b565b610923610c09565b600062093a8061093d8142611e41565b6109479190611e63565b905090565b60008062093a80806004546109619190611e41565b61096b9190611e63565b66038d7ea4c680055490915061098c9084906001600160a01b031683611591565b9392505050565b66038d7ea4c680088166038d7ea4c6800081106109af57600080fd5b0154905081565b66071afd498d0008546001600160a01b031633146109d357600080fd5b66038d7ea4c68006546001600160a01b03828116911614156109f457600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190611eff565b66071afd498d000854909150610a82906001600160a01b038481169116836111ce565b5050565b66071afd498d0009546001600160a01b03163314610aa357600080fd5b66071afd498d0008805466071afd498d000980546001600160a01b038082166001600160a01b0319808616821790965594909116909155604080519190921680825260208201939093527ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a150565b66071afd498d0008546001600160a01b03163314610b3857600080fd5b66071afd498d000a805460ff60a01b1916600160a01b17905566038d7ea4c68006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc49190611eff565b66071afd498d000a5466038d7ea4c6800654919250610bf0916001600160a01b039081169116836111ce565b50565b60058166038d7ea4c6800081106109af57600080fd5b66038d7ea4c68005546001546001600160a01b0390911690600062093a80610c318142611e41565b610c3b9190611e63565b9050826001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7857600080fd5b505af1158015610c8c573d6000803e3d6000fd5b5050505060005b6014811015610daa5781831115610ca957610daa565b6000610cb58585611926565b60405163d1febfb960e01b8152600481018290529091506000906001600160a01b0387169063d1febfb990602401608060405180830381865afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d249190611f2f565b905060008160400151861115610d46576040820151610d439087611ee8565b90505b610d65818360200151610d599190611fa1565b83516108e6919061203f565b66038d7ea4c680088766038d7ea4c680008110610d8457610d84611e82565b0155505050610d9662093a8084611eb5565b925080610da281611ecd565b915050610c93565b505060015550565b60405163391044d760e21b8152600481018490526000908190819081906001600160a01b0387169063e441135c90602401602060405180830381865afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e249190611eff565b60005490915081610e3c57600094505050505061098c565b60008881526002602052604090205480610e6357610e5c888a8486611225565b9450610e75565b60008981526003602052604090205494505b84610e7f57600194505b6040516309bb79ed60e11b8152600481018a9052602481018690526000906001600160a01b038a1690631376f3da90604401608060405180830381865afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef29190611f2f565b905081610f345762093a8080600162093a808460400151610f139190611eb5565b610f1d9190611ee8565b610f279190611e41565b610f319190611e63565b91505b6004548210610f4c576000965050505050505061098c565b82821015610f58578291505b6040805160808101825260008082526020820181905291810182905260608101829052905b603281101561114357898410610f9257611143565b82604001518410158015610fa65750858811155b1561106c57610fb6600189611eb5565b975082915085881115610ff55760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611131565b6040516309bb79ed60e11b8152600481018d9052602481018990526001600160a01b038c1690631376f3da90604401608060405180830381865afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110659190611f2f565b9250611131565b600082604001518561107e9190611ee8565b905060006110a18460200151836110959190611fa1565b85516108e6919061203f565b9050801580156110b05750878a115b156110bc575050611143565b801561111f5766038d7ea4c680088666038d7ea4c6800081106110e1576110e1611e82565b015460058766038d7ea4c6800081106110fc576110fc611e82565b01546111089083611e63565b6111129190611e41565b61111c908a611eb5565b98505b61112c62093a8087611eb5565b955050505b8061113b81611ecd565b915050610f7d565b506111588561115360018a611ee8565b611a7f565b60008c8152600360209081526040808320849055600282529182902086905581518e8152908101899052908101829052606081018790529097507fcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f009060800160405180910390a150939998505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611220908490611a8e565b505050565b60008082815b60808110156113115781831061124057611311565b6000600261124e8486611eb5565b611259906002611eb5565b6112639190611e41565b6040516309bb79ed60e11b8152600481018a9052602481018290529091506000906001600160a01b038b1690631376f3da90604401608060405180830381865afa1580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d99190611f2f565b9050878160400151116112ee578194506112fc565b6112f9600183611ee8565b93505b5050808061130990611ecd565b91505061122b565b50909695505050505050565b60008183101561132d578161098c565b5090919050565b66038d7ea4c68006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a79190611eff565b9050600066038d7ea4c6800754826113bf9190611ee8565b66038d7ea4c6800783905560045490915060006113dc8242611ee8565b426004559050600062093a806113f28185611e41565b6113fc9190611e63565b90506000805b601481101561154f5761141862093a8084611eb5565b9150814210156114a1578315801561142f57508442145b15611469578560058466038d7ea4c68000811061144e5761144e611e82565b01600082825461145e9190611eb5565b9091555061154f9050565b836114748642611ee8565b61147e9088611e63565b6114889190611e41565b60058466038d7ea4c68000811061144e5761144e611e82565b831580156114ae57508482145b156114e8578560058466038d7ea4c6800081106114cd576114cd611e82565b0160008282546114dd9190611eb5565b909155506115369050565b836114f38684611ee8565b6114fd9088611e63565b6115079190611e41565b60058466038d7ea4c68000811061152057611520611e82565b0160008282546115309190611eb5565b90915550505b819450819250808061154790611ecd565b915050611402565b5060408051428152602081018790527fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d6910160405180910390a1505050505050565b60405163391044d760e21b8152600481018490526000908190819081906001600160a01b0387169063e441135c90602401602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190611eff565b6000549091508161161b57600094505050505061098c565b600088815260026020526040902054806116425761163b888a8486611225565b9450611654565b60008981526003602052604090205494505b8461165e57600194505b6040516309bb79ed60e11b8152600481018a9052602481018690526000906001600160a01b038a1690631376f3da90604401608060405180830381865afa1580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d19190611f2f565b9050816117135762093a8080600162093a8084604001516116f29190611eb5565b6116fc9190611ee8565b6117069190611e41565b6117109190611e63565b91505b600454821061172b576000965050505050505061098c565b82821015611737578291505b6040805160808101825260008082526020820181905291810182905260608101829052905b60328110156119165789841061177157611916565b826040015184101580156117855750858811155b1561184b57611795600189611eb5565b9750829150858811156117d45760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611904565b6040516309bb79ed60e11b8152600481018d9052602481018990526001600160a01b038c1690631376f3da90604401608060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118449190611f2f565b9250611904565b600082604001518561185d9190611ee8565b905060006118748460200151836110959190611fa1565b9050801580156118835750878a115b1561188f575050611916565b80156118f25766038d7ea4c680088666038d7ea4c6800081106118b4576118b4611e82565b015460058766038d7ea4c6800081106118cf576118cf611e82565b01546118db9083611e63565b6118e59190611e41565b6118ef908a611eb5565b98505b6118ff62093a8087611eb5565b955050505b8061190e81611ecd565b91505061175c565b50949a9950505050505050505050565b600080600090506000846001600160a01b031663900cf0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561196d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119919190611eff565b905060005b6080811015611a75578183106119ab57611a75565b600060026119b98486611eb5565b6119c4906002611eb5565b6119ce9190611e41565b60405163d1febfb960e01b8152600481018290529091506000906001600160a01b0389169063d1febfb990602401608060405180830381865afa158015611a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3d9190611f2f565b905086816040015111611a5257819450611a60565b611a5d600183611ee8565b93505b50508080611a6d90611ecd565b915050611996565b5090949350505050565b600081831061132d578161098c565b6000611ae3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b609092919063ffffffff16565b8051909150156112205780806020019051810190611b0191906120a5565b6112205760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f0565b6060611b6f8484600085611b77565b949350505050565b606082471015611bd85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103f0565b6001600160a01b0385163b611c2f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f0565b600080866001600160a01b03168587604051611c4b91906120f7565b60006040518083038185875af1925050503d8060008114611c88576040519150601f19603f3d011682016040523d82523d6000602084013e611c8d565b606091505b50915091506108f082828660608315611ca757508161098c565b825115611cb75782518084602001fd5b8160405162461bcd60e51b81526004016103f09190612113565b600060208284031215611ce357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d2957611d29611cea565b604052919050565b60006020808385031215611d4457600080fd5b823567ffffffffffffffff80821115611d5c57600080fd5b818501915085601f830112611d7057600080fd5b813581811115611d8257611d82611cea565b8060051b9150611d93848301611d00565b8181529183018401918481019088841115611dad57600080fd5b938501935b83851015611dcb57843582529385019390850190611db2565b98975050505050505050565b6001600160a01b0381168114610bf057600080fd5b600060208284031215611dfe57600080fd5b813561098c81611dd7565b60008060408385031215611e1c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600082611e5e57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611e7d57611e7d611e2b565b500290565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611eaa57600080fd5b815161098c81611dd7565b60008219821115611ec857611ec8611e2b565b500190565b6000600019821415611ee157611ee1611e2b565b5060010190565b600082821015611efa57611efa611e2b565b500390565b600060208284031215611f1157600080fd5b5051919050565b8051600f81900b8114611f2a57600080fd5b919050565b600060808284031215611f4157600080fd5b6040516080810181811067ffffffffffffffff82111715611f6457611f64611cea565b604052611f7083611f18565b8152611f7e60208401611f18565b602082015260408301516040820152606083015160608201528091505092915050565b600081600f0b83600f0b60016001607f1b03600082136000841383830485118282161615611fd157611fd1611e2b565b6f7fffffffffffffffffffffffffffffff196000851282811687830587121615611ffd57611ffd611e2b565b6000871292508582058712848416161561201957612019611e2b565b8585058712818416161561202f5761202f611e2b565b5050509290910295945050505050565b600081600f0b83600f0b600081128160016001607f1b03190183128115161561206a5761206a611e2b565b8160016001607f1b0301831381161561208557612085611e2b565b5090039392505050565b634e487b7160e01b600052600160045260246000fd5b6000602082840312156120b757600080fd5b8151801515811461098c57600080fd5b60005b838110156120e25781810151838201526020016120ca565b838111156120f1576000848401525b50505050565b600082516121098184602087016120c7565b9190910192915050565b60208152600082518060208401526121328160408501602087016120c7565b601f01601f1916919091016040019291505056fea2646970667358221220ce8a2045a2d43fd0c33b486ade50bc7753c2d49f265314797d653ebb80d63afd64736f6c634300080b0033a26469706673582212207cc78814c92f0c245694f7c8cfebf2715a086981cff348bf1cd4955a6c06f83364736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80637ca4850014610030575b600080fd5b61004361003e3660046102c3565b610045565b005b60005b878110156102425760008a8a8a848181106100655761006561039a565b9050602002013589898581811061007e5761007e61039a565b905060200201602081019061009391906103b0565b8888868181106100a5576100a561039a565b90506020020160208101906100ba91906103b0565b8787878181106100cc576100cc61039a565b90506020020160208101906100e191906103b0565b6040516100ed9061024e565b6001600160a01b0395861681526020810194909452918416604084015283166060830152909116608082015260a001604051809103906000f080158015610138573d6000803e3d6000fd5b50905087878381811061014d5761014d61039a565b905060200201602081019061016291906103b0565b6001600160a01b03168b6001600160a01b0316826001600160a01b03167fd8bb1da9711c8d8a288fab09d4091ec2c7396075875a933489ba01f1b2b7a9f88d8d878181106101b2576101b261039a565b905060200201358a8a888181106101cb576101cb61039a565b90506020020160208101906101e091906103b0565b8989898181106101f2576101f261039a565b905060200201602081019061020791906103b0565b604080519384526001600160a01b03928316602085015291169082015260600160405180910390a4508061023a816103d2565b915050610048565b50505050505050505050565b612345806103fc83390190565b80356001600160a01b038116811461027257600080fd5b919050565b60008083601f84011261028957600080fd5b50813567ffffffffffffffff8111156102a157600080fd5b6020830191508360208260051b85010111156102bc57600080fd5b9250929050565b600080600080600080600080600060a08a8c0312156102e157600080fd5b6102ea8a61025b565b985060208a013567ffffffffffffffff8082111561030757600080fd5b6103138d838e01610277565b909a50985060408c013591508082111561032c57600080fd5b6103388d838e01610277565b909850965060608c013591508082111561035157600080fd5b61035d8d838e01610277565b909650945060808c013591508082111561037657600080fd5b506103838c828d01610277565b915080935050809150509295985092959850929598565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156103c257600080fd5b6103cb8261025b565b9392505050565b60006000198214156103f457634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405266071afd498d000a805460ff60a81b1916600160a81b1790553480156200002a57600080fd5b5060405162002345380380620023458339810160408190526200004d9162000101565b600062093a806200005f818762000168565b6200006b91906200018b565b600081905560048190556001555066038d7ea4c6800680546001600160a01b03199081166001600160a01b039586161790915566038d7ea4c68005805482169685169690961790955566071afd498d0008805486169284169290921790915566071afd498d000a805490941691161790915550620001b9565b80516001600160a01b0381168114620000fc57600080fd5b919050565b600080600080600060a086880312156200011a57600080fd5b6200012586620000e4565b9450602086015193506200013c60408701620000e4565b92506200014c60608701620000e4565b91506200015c60808701620000e4565b90509295509295909350565b6000826200018657634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620001b457634e487b7160e01b600052601160045260246000fd5b500290565b61217c80620001c96000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80639c868ac0116100de578063dfe0503111610097578063e671928711610071578063e671928714610318578063edf5999714610331578063f851a44014610344578063fc0c546a1461035d57600080fd5b8063dfe05031146102ef578063e1593b1314610308578063e36988531461031057600080fd5b80639c868ac01461028c578063b21ed502146102a6578063b80777ea146102ae578063d1d58b25146102b6578063d4dafba8146102c9578063db2f5f79146102dc57600080fd5b8063379607f511610130578063379607f51461022c578063486d25fe1461023f578063688098891461025f5780637f58e8f814610272578063811a40fe1461027b578063834ee4171461028357600080fd5b8063127dcbd31461017857806316aea5c0146101945780631f1db043146101b457806322b04bfc146101d7578063290717df146101e65780632c3f531e146101fb575b600080fd5b61018160015481565b6040519081526020015b60405180910390f35b6101816101a2366004611cd1565b60036020526000908152604090205481565b6101c76101c2366004611d31565b610376565b604051901515815260200161018b565b61018166038d7ea4c680075481565b6101f96101f4366004611dec565b61058a565b005b66071afd498d000a54610214906001600160a01b031681565b6040516001600160a01b03909116815260200161018b565b61018161023a366004611cd1565b61060e565b61018161024d366004611cd1565b60026020526000908152604090205481565b61018161026d366004611e09565b6107b8565b61018160045481565b6101f96108fb565b61018160005481565b66071afd498d000a546101c790600160a01b900460ff1681565b6101f9610925565b61018161092d565b6101816102c4366004611cd1565b61094c565b6101816102d7366004611cd1565b610993565b6101f96102ea366004611dec565b6109b6565b66038d7ea4c6800554610214906001600160a01b031681565b6101f9610a86565b6101f9610b1b565b66071afd498d000954610214906001600160a01b031681565b61018161033f366004611cd1565b610bf3565b66071afd498d000854610214906001600160a01b031681565b66038d7ea4c6800654610214906001600160a01b031681565b66071afd498d000a54600090600160a81b900460ff1660011461039857600080fd5b66071afd498d000a805460ff60a81b1916600160a91b179081905560ff600160a01b90910416156103f95760405162461bcd60e51b81526020600482015260066024820152651ada5b1b195960d21b60448201526064015b60405180910390fd5b600154421061040a5761040a610c09565b60045462093a8061041b8183611e41565b6104259190611e63565b66038d7ea4c68005549091506001600160a01b03166000805b855181101561054057600086828151811061045b5761045b611e82565b6020026020010151905080600014156104745750610540565b6000610481828688610db2565b9050801561052b5766038d7ea4c68005546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e90602401602060405180830381865afa1580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd9190611e98565b66038d7ea4c680065490915061051d906001600160a01b031682846111ce565b6105278286611eb5565b9450505b5050808061053890611ecd565b91505061043e565b508015610565578066038d7ea4c68007600082825461055f9190611ee8565b90915550505b6001935050505066071afd498d000a805460ff60a81b1916600160a81b179055919050565b66071afd498d0008546001600160a01b031633146105a757600080fd5b66071afd498d000980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a15050565b66071afd498d000a54600090600160a81b900460ff1660011461063057600080fd5b66071afd498d000a805460ff60a81b1916600160a91b179081905560ff600160a01b909104161561068c5760405162461bcd60e51b81526020600482015260066024820152651ada5b1b195960d21b60448201526064016103f0565b600154421061069d5761069d610c09565b60045462093a806106ae8183611e41565b6106b89190611e63565b66038d7ea4c68005549091506000906106dc9085906001600160a01b031684610db2565b905080156107975766038d7ea4c68005546040516331a9108f60e11b8152600481018690526000916001600160a01b031690636352211e90602401602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190611e98565b66038d7ea4c6800654909150610778906001600160a01b031682846111ce565b8166038d7ea4c6800760008282546107909190611ee8565b9091555050505b91505066071afd498d000a805460ff60a81b1916600160a81b179055919050565b66038d7ea4c680055460405163391044d760e21b8152600481018490526000916001600160a01b0316908290829063e441135c90602401602060405180830381865afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190611eff565b9050600061084083878785611225565b6040516309bb79ed60e11b815260048101889052602481018290529091506000906001600160a01b03851690631376f3da90604401608060405180830381865afa158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190611f2f565b90506108f08160400151876108cb9190611ee8565b82602001516108da9190611fa1565b82516108e6919061203f565b600f0b600061131d565b979650505050505050565b66071afd498d0008546001600160a01b0316331461091b5761091b61208f565b610923611334565b565b610923610c09565b600062093a8061093d8142611e41565b6109479190611e63565b905090565b60008062093a80806004546109619190611e41565b61096b9190611e63565b66038d7ea4c680055490915061098c9084906001600160a01b031683611591565b9392505050565b66038d7ea4c680088166038d7ea4c6800081106109af57600080fd5b0154905081565b66071afd498d0008546001600160a01b031633146109d357600080fd5b66038d7ea4c68006546001600160a01b03828116911614156109f457600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f9190611eff565b66071afd498d000854909150610a82906001600160a01b038481169116836111ce565b5050565b66071afd498d0009546001600160a01b03163314610aa357600080fd5b66071afd498d0008805466071afd498d000980546001600160a01b038082166001600160a01b0319808616821790965594909116909155604080519190921680825260208201939093527ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a150565b66071afd498d0008546001600160a01b03163314610b3857600080fd5b66071afd498d000a805460ff60a01b1916600160a01b17905566038d7ea4c68006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc49190611eff565b66071afd498d000a5466038d7ea4c6800654919250610bf0916001600160a01b039081169116836111ce565b50565b60058166038d7ea4c6800081106109af57600080fd5b66038d7ea4c68005546001546001600160a01b0390911690600062093a80610c318142611e41565b610c3b9190611e63565b9050826001600160a01b031663c2c4c5c16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7857600080fd5b505af1158015610c8c573d6000803e3d6000fd5b5050505060005b6014811015610daa5781831115610ca957610daa565b6000610cb58585611926565b60405163d1febfb960e01b8152600481018290529091506000906001600160a01b0387169063d1febfb990602401608060405180830381865afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d249190611f2f565b905060008160400151861115610d46576040820151610d439087611ee8565b90505b610d65818360200151610d599190611fa1565b83516108e6919061203f565b66038d7ea4c680088766038d7ea4c680008110610d8457610d84611e82565b0155505050610d9662093a8084611eb5565b925080610da281611ecd565b915050610c93565b505060015550565b60405163391044d760e21b8152600481018490526000908190819081906001600160a01b0387169063e441135c90602401602060405180830381865afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e249190611eff565b60005490915081610e3c57600094505050505061098c565b60008881526002602052604090205480610e6357610e5c888a8486611225565b9450610e75565b60008981526003602052604090205494505b84610e7f57600194505b6040516309bb79ed60e11b8152600481018a9052602481018690526000906001600160a01b038a1690631376f3da90604401608060405180830381865afa158015610ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef29190611f2f565b905081610f345762093a8080600162093a808460400151610f139190611eb5565b610f1d9190611ee8565b610f279190611e41565b610f319190611e63565b91505b6004548210610f4c576000965050505050505061098c565b82821015610f58578291505b6040805160808101825260008082526020820181905291810182905260608101829052905b603281101561114357898410610f9257611143565b82604001518410158015610fa65750858811155b1561106c57610fb6600189611eb5565b975082915085881115610ff55760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611131565b6040516309bb79ed60e11b8152600481018d9052602481018990526001600160a01b038c1690631376f3da90604401608060405180830381865afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110659190611f2f565b9250611131565b600082604001518561107e9190611ee8565b905060006110a18460200151836110959190611fa1565b85516108e6919061203f565b9050801580156110b05750878a115b156110bc575050611143565b801561111f5766038d7ea4c680088666038d7ea4c6800081106110e1576110e1611e82565b015460058766038d7ea4c6800081106110fc576110fc611e82565b01546111089083611e63565b6111129190611e41565b61111c908a611eb5565b98505b61112c62093a8087611eb5565b955050505b8061113b81611ecd565b915050610f7d565b506111588561115360018a611ee8565b611a7f565b60008c8152600360209081526040808320849055600282529182902086905581518e8152908101899052908101829052606081018790529097507fcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f009060800160405180910390a150939998505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611220908490611a8e565b505050565b60008082815b60808110156113115781831061124057611311565b6000600261124e8486611eb5565b611259906002611eb5565b6112639190611e41565b6040516309bb79ed60e11b8152600481018a9052602481018290529091506000906001600160a01b038b1690631376f3da90604401608060405180830381865afa1580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d99190611f2f565b9050878160400151116112ee578194506112fc565b6112f9600183611ee8565b93505b5050808061130990611ecd565b91505061122b565b50909695505050505050565b60008183101561132d578161098c565b5090919050565b66038d7ea4c68006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a79190611eff565b9050600066038d7ea4c6800754826113bf9190611ee8565b66038d7ea4c6800783905560045490915060006113dc8242611ee8565b426004559050600062093a806113f28185611e41565b6113fc9190611e63565b90506000805b601481101561154f5761141862093a8084611eb5565b9150814210156114a1578315801561142f57508442145b15611469578560058466038d7ea4c68000811061144e5761144e611e82565b01600082825461145e9190611eb5565b9091555061154f9050565b836114748642611ee8565b61147e9088611e63565b6114889190611e41565b60058466038d7ea4c68000811061144e5761144e611e82565b831580156114ae57508482145b156114e8578560058466038d7ea4c6800081106114cd576114cd611e82565b0160008282546114dd9190611eb5565b909155506115369050565b836114f38684611ee8565b6114fd9088611e63565b6115079190611e41565b60058466038d7ea4c68000811061152057611520611e82565b0160008282546115309190611eb5565b90915550505b819450819250808061154790611ecd565b915050611402565b5060408051428152602081018790527fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d6910160405180910390a1505050505050565b60405163391044d760e21b8152600481018490526000908190819081906001600160a01b0387169063e441135c90602401602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190611eff565b6000549091508161161b57600094505050505061098c565b600088815260026020526040902054806116425761163b888a8486611225565b9450611654565b60008981526003602052604090205494505b8461165e57600194505b6040516309bb79ed60e11b8152600481018a9052602481018690526000906001600160a01b038a1690631376f3da90604401608060405180830381865afa1580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d19190611f2f565b9050816117135762093a8080600162093a8084604001516116f29190611eb5565b6116fc9190611ee8565b6117069190611e41565b6117109190611e63565b91505b600454821061172b576000965050505050505061098c565b82821015611737578291505b6040805160808101825260008082526020820181905291810182905260608101829052905b60328110156119165789841061177157611916565b826040015184101580156117855750858811155b1561184b57611795600189611eb5565b9750829150858811156117d45760405180608001604052806000600f0b81526020016000600f0b81526020016000815260200160008152509250611904565b6040516309bb79ed60e11b8152600481018d9052602481018990526001600160a01b038c1690631376f3da90604401608060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118449190611f2f565b9250611904565b600082604001518561185d9190611ee8565b905060006118748460200151836110959190611fa1565b9050801580156118835750878a115b1561188f575050611916565b80156118f25766038d7ea4c680088666038d7ea4c6800081106118b4576118b4611e82565b015460058766038d7ea4c6800081106118cf576118cf611e82565b01546118db9083611e63565b6118e59190611e41565b6118ef908a611eb5565b98505b6118ff62093a8087611eb5565b955050505b8061190e81611ecd565b91505061175c565b50949a9950505050505050505050565b600080600090506000846001600160a01b031663900cf0cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561196d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119919190611eff565b905060005b6080811015611a75578183106119ab57611a75565b600060026119b98486611eb5565b6119c4906002611eb5565b6119ce9190611e41565b60405163d1febfb960e01b8152600481018290529091506000906001600160a01b0389169063d1febfb990602401608060405180830381865afa158015611a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3d9190611f2f565b905086816040015111611a5257819450611a60565b611a5d600183611ee8565b93505b50508080611a6d90611ecd565b915050611996565b5090949350505050565b600081831061132d578161098c565b6000611ae3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b609092919063ffffffff16565b8051909150156112205780806020019051810190611b0191906120a5565b6112205760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f0565b6060611b6f8484600085611b77565b949350505050565b606082471015611bd85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103f0565b6001600160a01b0385163b611c2f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f0565b600080866001600160a01b03168587604051611c4b91906120f7565b60006040518083038185875af1925050503d8060008114611c88576040519150601f19603f3d011682016040523d82523d6000602084013e611c8d565b606091505b50915091506108f082828660608315611ca757508161098c565b825115611cb75782518084602001fd5b8160405162461bcd60e51b81526004016103f09190612113565b600060208284031215611ce357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d2957611d29611cea565b604052919050565b60006020808385031215611d4457600080fd5b823567ffffffffffffffff80821115611d5c57600080fd5b818501915085601f830112611d7057600080fd5b813581811115611d8257611d82611cea565b8060051b9150611d93848301611d00565b8181529183018401918481019088841115611dad57600080fd5b938501935b83851015611dcb57843582529385019390850190611db2565b98975050505050505050565b6001600160a01b0381168114610bf057600080fd5b600060208284031215611dfe57600080fd5b813561098c81611dd7565b60008060408385031215611e1c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600082611e5e57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611e7d57611e7d611e2b565b500290565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611eaa57600080fd5b815161098c81611dd7565b60008219821115611ec857611ec8611e2b565b500190565b6000600019821415611ee157611ee1611e2b565b5060010190565b600082821015611efa57611efa611e2b565b500390565b600060208284031215611f1157600080fd5b5051919050565b8051600f81900b8114611f2a57600080fd5b919050565b600060808284031215611f4157600080fd5b6040516080810181811067ffffffffffffffff82111715611f6457611f64611cea565b604052611f7083611f18565b8152611f7e60208401611f18565b602082015260408301516040820152606083015160608201528091505092915050565b600081600f0b83600f0b60016001607f1b03600082136000841383830485118282161615611fd157611fd1611e2b565b6f7fffffffffffffffffffffffffffffff196000851282811687830587121615611ffd57611ffd611e2b565b6000871292508582058712848416161561201957612019611e2b565b8585058712818416161561202f5761202f611e2b565b5050509290910295945050505050565b600081600f0b83600f0b600081128160016001607f1b03190183128115161561206a5761206a611e2b565b8160016001607f1b0301831381161561208557612085611e2b565b5090039392505050565b634e487b7160e01b600052600160045260246000fd5b6000602082840312156120b757600080fd5b8151801515811461098c57600080fd5b60005b838110156120e25781810151838201526020016120ca565b838111156120f1576000848401525b50505050565b600082516121098184602087016120c7565b9190910192915050565b60208152600082518060208401526121328160408501602087016120c7565b601f01601f1916919091016040019291505056fea2646970667358221220ce8a2045a2d43fd0c33b486ade50bc7753c2d49f265314797d653ebb80d63afd64736f6c634300080b0033a26469706673582212207cc78814c92f0c245694f7c8cfebf2715a086981cff348bf1cd4955a6c06f83364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}